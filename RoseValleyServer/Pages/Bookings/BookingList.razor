@page "/bookings"
@using Models;
@using Business.Repository.IRepository;
@using System.IO;
@using RoseValleyServer.Service.ExcellExport;
@using NPOI.SS.UserModel;
@using NPOI.XSSF.UserModel;
@inject IRoomBookingRepository BookRepo;
@inject RoseValleyServer.Service.IService.IFIleUpload Uploads;
@inject IJSRuntime JsRun;
@inject NavigationManager NavManager;
@attribute [Authorize(Roles = CommonFiles.SD.Role_Admin)]

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Rose Valley Villas резервации:</h4>
    </div>
    <div class="col-3 offset-1">
        <button class="btn btn-primary" @onclick="@(async ()=> {await GenerateExcel();})">Изтегли документ </button>
    </div>
</div>
<div class="row mt-4">
    <div class="col-md-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Име</th>
                    <th>Имейл</th>
                    <th>Телефон</th>
                    <th>Дата на настаняване</th>
                    <th>Дата на напускане</th>
                    <th>Крайна цена</th>

                </tr>
            </thead>
            <tbody>
                @if (Bookings.Any())
                {
                    foreach (var book in Bookings)
                    {
                        <tr>
                            <td>@book.Name</td>
                            <td>@book.Email</td>
                            <td>@book.Phone"</td>
                            <td>@book.CheckIn"</td>
                            <td>@book.CheckOut"</td>
                            <td>@book.TotalCost"</td>

                            <td>
                                <button class="btn btn-secondary" @onclick="() => HandleDelete(book.Id)">Изтриване</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">Няма добавени резервации.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<DeleteConfirmationComponent IsParentProcessing="IsProssesing" ConfirmationChanged="ConfirmDelete"></DeleteConfirmationComponent>

@code {
    internal IEnumerable<RoomBookingDTO> Bookings { get; set; } = new List<RoomBookingDTO>();

    private bool IsProssesing { get; set; } = false;
    private int? DeletedBooking { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        Bookings = await BookRepo.GetAllBookings();
    }

    public async Task HandleDelete(int bookingId)
    {
        DeletedBooking = bookingId;
        await JsRun.InvokeVoidAsync("ShowDeleteConfirm");
    }
    public async Task ConfirmDelete(bool IsConfirmed)
    {
        IsProssesing = true;
        if (IsConfirmed && DeletedBooking != null)
        {
            try
            {
                var result = await BookRepo.DeleteBooking(DeletedBooking.Value);
                await JsRun.ToastrSuccess("Данните са изтрити успешно!");
            }
            catch (Exception e)
            {
                await JsRun.ToastrError(e.Message);
            }
            Bookings = await BookRepo.GetAllBookings();
        }
        await JsRun.InvokeVoidAsync("HideDeleteConfirm");
        IsProssesing = false;
    }

    public async Task GenerateExcel()
    {
        var export = await BookRepo.GetAllBookings();

        IWorkbook workbook = new XSSFWorkbook();
        var dataFormat = workbook.CreateDataFormat();
        var dataStyle = workbook.CreateCellStyle();
        dataStyle.DataFormat = dataFormat.GetFormat("MM/dd/yyyy HH:mm:ss");

        ISheet worksheet = workbook.CreateSheet("Sheet1");

        int rowNumber = 0;
        IRow row = worksheet.CreateRow(rowNumber++);

        ICell cell = row.CreateCell(0);
        cell.SetCellValue("BookingId");

        cell = row.CreateCell(1);
        cell.SetCellValue("Name");

        cell = row.CreateCell(2);
        cell.SetCellValue("Email");

        cell = row.CreateCell(3);
        cell.SetCellValue("Phone");

        cell = row.CreateCell(4);
        cell.SetCellValue("Check In");

        cell = row.CreateCell(5);
        cell.SetCellValue("Check Out");

        cell = row.CreateCell(6);
        cell.SetCellValue("Total Cost");


        foreach (var book in export)
        {
            row = worksheet.CreateRow(rowNumber++);

            cell = row.CreateCell(0);
            cell.SetCellValue(book.Id);

            cell = row.CreateCell(1);
            cell.SetCellValue(book.Name);

            cell = row.CreateCell(2);
            cell.SetCellValue(book.Email);

            cell = row.CreateCell(3);
            cell.SetCellValue(book.Phone);

            cell = row.CreateCell(4);
            cell.SetCellValue(book.CheckIn);

            cell = row.CreateCell(4);
            cell.SetCellValue(book.CheckOut);

            cell = row.CreateCell(4);
            cell.SetCellValue(book.TotalCost);
        }

        MemoryStream ms = new MemoryStream();
        workbook.Write(ms);
        byte[] bytes = ms.ToArray();
        ms.Close();

        await JsRun.SaveAsFileAsync("Booking List", bytes, "application/vnd.ms-excel");
    }
}


